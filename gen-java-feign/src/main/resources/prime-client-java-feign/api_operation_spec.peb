{# @pebvariable name="t" type="io.github.primelib.primecodegen.core.domain.template.NitroGeneratorData" #}
{# @pebvariable name="cfg" type="io.github.primelib.primecodegen.javafeign.config.JavaFeignGeneratorConfig" #}
{% include "./licenseInfo.peb" %}
package {{ t.additionalProperties.get("specPackage") }};

{% include "./import.peb" with {"cfg": cfg, "imports": t.api.imports} %}
import lombok.AccessLevel;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;
import java.util.function.Consumer;

/**
 * {{ t.operation.classname }}Spec
 * <p>
 * Specification for the {{ t.operation.classname }} operation.
 * <p>
 * {{ t.operation.codegenOperation.summary }}{{ newline() }}
 */
@Data
@Accessors(fluent = true)
@NoArgsConstructor(access = AccessLevel.PRIVATE, force = true)
@Generated(value = "{{ t.generatorClass }}"{% if not cfg.hideGenerationTimestamp %}, date = "{{ t.generatorDate }}"{% endif %})
public class {{ t.operation.classname }}OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

{% for param in t.operation.codegenOperation.allParams %}
    /**
{{ javadocDescription("     * ", param.description) }}
     */
    {% include "./param_annotation.peb" %}{{ newline() }}
    private {{ param.dataType }} {{ param.paramName }};
{{ newline() }}
{% endfor %}
    /**
     * Constructs a validated implementation of {@link {{ t.operation.classname }}OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public {{ t.operation.classname }}OperationSpec(Consumer<{{ t.operation.classname }}OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
{% for param in t.operation.codegenOperation.allParams %}
{% if param.required %}
        Objects.requireNonNull({{ param.paramName }}, "{{ param.paramName }} is a required parameter!");
{% endif %}
{% endfor %}
    }

}
