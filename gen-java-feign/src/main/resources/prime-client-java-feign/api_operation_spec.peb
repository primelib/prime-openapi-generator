{# @pebvariable name="t" type="io.github.primelib.primecodegen.core.domain.template.NitroGeneratorData" #}
{# @pebvariable name="cfg" type="io.github.primelib.primecodegen.javafeign.config.JavaFeignGeneratorConfig" #}
{# @pebvariable name="param" type="org.openapitools.codegen.CodegenParameter" #}
{% include "./licenseInfo.peb" %}
package {{ t.additionalProperties.get("specPackage") }};

{% include "./import.peb" with {"cfg": cfg, "imports": t.api.imports} %}
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.experimental.Accessors;
import java.util.function.Consumer;

/**
 * {{ t.operation.classname }}Spec
 * <p>
 * Specification for the {{ t.operation.classname }} operation.
{% if t.operation.codegenOperation.summary is not empty %}
 * <p>
{{ javadocDescription(" * ", t.operation.codegenOperation.summary) }}
{% endif %}
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@Builder
@Generated(value = "{{ t.generatorClass }}"{% if not cfg.hideGenerationTimestamp %}, date = "{{ t.generatorDate }}"{% endif %})
public class {{ t.operation.classname }}OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

{% for param in t.operation.allNonStaticParams %}
    /**
{{ javadocDescription("     * ", param.description) }}
     */
    {% include "./param_annotation.peb" %}{{ newline() }}
    private {{ param.dataType }} {{ param.paramName }};{{ newline() }}

{% endfor %}
    /**
     * Constructs a validated instance of {@link {{ t.operation.classname }}OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public {{ t.operation.classname }}OperationSpec(Consumer<{{ t.operation.classname }}OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Constructs a validated instance of {@link {{ t.operation.classname }}OperationSpec}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the operation is updated.
{% for param in t.operation.allNonStaticParams %}
     * @param {{ param.paramName | padright(20) }} {{ javadocDescriptionInline(param.description) }}{{ newline() }}
{% endfor %}
     */
    @ApiStatus.Internal
    public {{ t.operation.classname }}OperationSpec({% for param in t.operation.allNonStaticParams %}{{ param.dataType }} {{ param.paramName }}{% if not loop.last %}, {% endif %}{% endfor %}) {
{% for param in t.operation.allNonStaticParams %}
        this.{{ param.paramName }} = {{ param.paramName }};
{% endfor %}

        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
{% for param in t.operation.codegenOperation.allParams %}
{% if not param.vendorExtensions.getOrDefault("x-param-static", false) and param.required %}
        Objects.requireNonNull({{ param.paramName }}, "{{ param.paramName }} is a required parameter!");
{% endif %}
{% endfor %}
    }
}
