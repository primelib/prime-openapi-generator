{# @pebvariable name="t" type="io.github.primelib.primecodegen.core.domain.template.NitroGeneratorData" #}
{# @pebvariable name="cfg" type="io.github.primelib.primecodegen.javafeign.config.JavaFeignGeneratorConfig" #}
{% include "../licenseInfo.peb" %}
package {{ t.additionalProperties.get("invokerPackage") }};

import lombok.AccessLevel;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.net.Proxy;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Objects;
import java.util.Set;
import java.util.function.Consumer;

@Data
@Accessors(fluent = true)
@NoArgsConstructor(access = AccessLevel.PRIVATE, force = true)
@Slf4j
public class {{ t.mainClassName }}ProxySpec {
    /*
     * Only HTTP(S) proxies are supported due to library limitations
     */
    @NotNull
    private Proxy.Type type = Proxy.Type.HTTP;

    /**
     * The host of the proxy server
     */
    private String host;

    /**
     * The port of the proxy server
     */
    private Integer port;

    /**
     * The username used to authenticate with the proxy, if applicable
     */
    private String username;

    /**
     * The password used to authenticate with the proxy, if applicable
     */
    private char[] password;

    /**
     * Constructs a validated implementation of {@link {{ t.mainClassName }}ProxySpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public {{ t.mainClassName }}ProxySpec(Consumer<{{ t.mainClassName }}ProxySpec> spec) {
        spec.accept(this);
        validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException if a required parameter is missing
     * @throws IllegalArgumentException if a parameter has an invalid value
     */
    public void validate() {
        Objects.requireNonNull(type, "type is a required parameter!");
        if (type == Proxy.Type.HTTP) {
            Objects.requireNonNull(host, "host is a required parameter!");
            Objects.requireNonNull(port, "port is a required parameter!");
        }
    }

    /**
     * Creates a new {@link {{ t.mainClassName }}ProxySpec} with values taken from the proxy environment variables, if applicable.
     */
    public static {{ t.mainClassName }}ProxySpec detect() {
        String httpProxy = System.getenv("http_proxy");
        String httpsProxy = System.getenv("https_proxy");

        // check if a proxy is configured
        for (String p : Set.of(httpProxy, httpsProxy)) {
            try {
                URI proxyUri = new URI(p);
                return new {{ t.mainClassName }}ProxySpec(spec -> {
                    spec.type(Proxy.Type.HTTP);
                    spec.host(proxyUri.getHost());
                    spec.port(proxyUri.getPort() == -1 ? 80 : proxyUri.getPort());
                });
            } catch (URISyntaxException ignored) {
                // ignore invalid proxy settings
            }
        }

        // no proxy configured
        return new {{ t.mainClassName }}ProxySpec(spec -> {
            spec.type(Proxy.Type.DIRECT);
        });
    }
}
