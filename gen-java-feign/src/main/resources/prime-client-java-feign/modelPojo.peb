{# @pebvariable name="model" type="io.github.primelib.primecodegen.core.domain.template.NitroGeneratorModelData" #}
{# @pebvariable name="cfg" type="io.github.primelib.primecodegen.javafeign.config.JavaFeignGeneratorConfig" #}
{# @pebvariable name="var" type="org.openapitools.codegen.CodegenProperty" #}
/**
 * {% if model.title is empty %}{{ model.classname }}{% else %}{{ model.title }}{% endif %}{{ newline() }}
{% if model.description is not empty %}
 * <p>
 * {{ model.description }}{{ newline() }}
{% endif %}
 *
{% if model.isDeprecated %} * @deprecated{% if model.vendorExtensions['x-deprecated'] is not empty %} {{ model.vendorExtensions['x-deprecated'] }}{% endif %}{{ newline() }}{% endif %}
 */
@Data
{% if model.codegenModel.vars is not empty %}
@AllArgsConstructor
{% endif %}
@Accessors(fluent = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
{% if model.codegenModel.parent is not empty %}
@EqualsAndHashCode(callSuper = true)
{% endif %}
{% if model.codegenModel.vars is not empty %}
@JsonPropertyOrder({
{% for var in model.codegenModel.vars %}
    "{{ var.baseName }}"{% if not loop.last %},{% endif %}{{ newline() }}
{% endfor %}
})
{% endif %}
@JsonTypeName("{{ model.codegenModel.name }}")
{% if model.isDeprecated %}@Deprecated{{ newline() }}{% endif %}
@Generated(value = "{{ t.generatorClass }}"{% if not cfg.hideGenerationTimestamp %}, date = "{{ t.generatorDate }}"{% endif %})
public class {{ model.classname }}{% if model.codegenModel.parent is not empty %} extends {{ model.codegenModel.parent }}{% endif %} {

    /**
     * Constructs a validated implementation of {@link {{ model.classname}}}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public {{ model.classname }}(Consumer<{{ model.classname }}> spec) {
        spec.accept(this);
    }

{% for var in model.codegenModel.vars %}
{% if var.description is not empty %}
    /**
{{ javadocDescription("     * ", var.description) }}
     */
{% endif %}
    @JsonProperty("{{ var.baseName }}")
    protected {{ var.datatypeWithEnum }} {{ var.name }}{% if var.defaultValue is not empty %} = {{ var.defaultValue }}{% endif %};

{% endfor %}

{% for var in model.codegenModel.vars %}
{% if var.isEnum %}
{% include "./model_inner_enum.peb" %}{{ newline() }}
{% endif %}
{% endfor %}
}
