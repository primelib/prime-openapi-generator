{# @pebvariable name="t" type="io.github.primelib.primecodegen.core.domain.template.NitroGeneratorData" #}
{# @pebvariable name="cfg" type="io.github.primelib.primecodegen.javafeign.config.JavaFeignGeneratorConfig" #}
{% include "./licenseInfo.peb" %}
package {{ t.additionalProperties.get("specPackage") }};

{% include "./import.peb" with {"cfg": cfg, "imports": t.api.imports} %}
import lombok.AccessLevel;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * {{ t.operation.classname }}Spec
 * <p>
 * Specification for the {{ t.operation.classname }} operation.
 * <p>
 * {{ t.operation.codegenOperation.summary }}{{ newline() }}
 *
{% if t.operation.codegenOperation.allParams is not empty %}
 * Required Parameters:
{% for param in t.operation.codegenOperation.allParams %}
{% if param.required %}
 * - {{ param.paramName }} {{ param.description }}{{ newline() }}
{% endif %}
{% endfor %}
 * Optional Parameters:
{% for param in t.operation.codegenOperation.allParams %}
{% if not param.required %}
 * - {{ param.paramName }} {{ param.description }}{{ newline() }}
{% endif %}
{% endfor %}
{% endif %}
 */
{# Information #}
{% if description is not empty %}@Schema(description = "{{ description }}"){{ newline() }}{% endif %}
@Data
@Accessors(fluent = true)
@NoArgsConstructor(access = AccessLevel.PRIVATE, force = true)
@Generated(value = "{{ t.generatorClass }}"{% if not cfg.hideGenerationTimestamp %}, date = "{{ t.generatorDate }}"{% endif %})
public class {{ t.operation.classname }}Spec {

{% for param in t.operation.codegenOperation.allParams %}
    /**
     * {{ param.description }}{{ newline() }}
     */
    {% if param.required %}@NotNull{% else %}@Nullable{% endif %}{{ newline() }}
    private {{ param.dataType }} {{ param.paramName }};
{% endfor %}

    /**
     * Constructs a validated implementation of {@link {{ t.operation.classname }}Spec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public {{ t.operation.classname }}Spec(Consumer<{{ t.operation.classname }}Spec> spec) {
        spec.accept(this);
        validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
{% for param in t.operation.codegenOperation.allParams %}
{% if param.required %}
        Objects.requireNonNull({{ param.paramName }}, "{{ param.paramName }} is a required parameter!");
{% endif %}
{% endfor %}
    }

}
