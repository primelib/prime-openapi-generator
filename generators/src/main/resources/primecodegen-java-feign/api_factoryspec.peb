{# @pebvariable name="t" type="io.github.primelib.primecodegen.core.domain.template.NitroGeneratorData" #}
{# @pebvariable name="cfg" type="io.github.primelib.primecodegen.javafeign.config.JavaFeignGeneratorConfig" #}
{% include "./licenseInfo.peb" %}
package {{ t.additionalProperties.get("invokerPackage") }};

{% include "./import.peb" with {"t": t, "imports": t.api.imports} %}
import {{ t.apiPackage }}.{{ t.mainClassName }}Api;
import {{ t.additionalProperties.get("authPackage") }}.ApiKeyAuthSpec;
import {{ t.additionalProperties.get("authPackage") }}.BasicAuthSpec;
import {{ t.additionalProperties.get("authPackage") }}.BearerAuthSpec;
import lombok.AccessLevel;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.Accessors;

import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.composite.CompositeMeterRegistry;

import io.github.primelib.primecodegenlib.java.feign.common.api.AuthMethod;
import io.github.primelib.primecodegenlib.java.feign.common.config.FeignModuleSpec;
import io.github.primelib.primecodegenlib.java.feign.common.config.ProxySpec;

import java.util.Objects;
import java.util.function.Consumer;

/**
 * A specification to construct a {@link {{ t.mainClassName }}Api} instance.
 */
{# Information #}
@Data
@EqualsAndHashCode(callSuper = true)
@Accessors(fluent = true)
@NoArgsConstructor(access = AccessLevel.PRIVATE, force = true)
@Generated(value = "{{ t.generatorClass }}"{% if not cfg.hideGenerationTimestamp %}, date = "{{ t.generatorDate }}"{% endif %})
public final class {{ t.mainClassName }}FactorySpec<T> extends FeignModuleSpec<{{ t.mainClassName }}FactorySpec<T>> {

    /**
     * The name of the backend to use
     */
    @NotNull
    private String backendName = "{{ t.additionalProperties.get("projectName") }}";

    /**
     * The API interface to use
     */
    @NotNull
    private Class<T> api;

    /**
     * The api base URL
     */
    @NotNull
    private String baseUrl = "{{ t.basePath }}";

    /**
     * The authentication methods to use
     */
    @Nullable
    private List<AuthMethod> auth = new ArrayList<>(5);

    /**
     * MeterRegistry to use for metrics
     */
    @NotNull
    private MeterRegistry meterRegistry = new CompositeMeterRegistry();

    /**
     * the feign log level
     * <p>
     * Defaults to {@code none}.
     * Allowed values are: {@code none}, {@code basic}, {@code headers}, {@code full}
     */
    @NotNull
    private String logLevel = "none";

    /**
     * Constructs a validated implementation of {@link {{ t.mainClassName }}Api}.
     *
     * @param spec the specification to process
     */
    @NotNull
    public {{ t.mainClassName }}FactorySpec(@NotNull Consumer<{{ t.mainClassName }}FactorySpec<T>> spec) {
        spec.accept(this);
        validate();
    }

    /**
     * Ensures the configured specification is valid.
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(backendName, "backendName must not be null");
        Objects.requireNonNull(api, "api must not be null");
        Objects.requireNonNull(baseUrl, "baseUrl must not be null");
        if (baseUrl.isEmpty()) {
            throw new IllegalArgumentException("baseUrl must not be empty");
        }
        Objects.requireNonNull(logLevel, "logLevel must not be null");
    }

{% if t.auth.hasApiKey %}
    public ApiKeyAuthSpec apiKeyAuth(Consumer<ApiKeyAuthSpec> spec) {
        ApiKeyAuthSpec method = new ApiKeyAuthSpec(spec);
        auth.add(method);
        return method;
    }

{% endif %}
{% if t.auth.hasBasic %}
    public BasicAuthSpec basicAuth(Consumer<BasicAuthSpec> spec) {
        BasicAuthSpec method = new BasicAuthSpec(spec);
        auth.add(method);
        return method;
    }

{% endif %}
{% if t.auth.hasBearer %}
    public BearerAuthSpec bearerAuth(Consumer<BearerAuthSpec> spec) {
        BearerAuthSpec method = new BearerAuthSpec(spec);
        auth.add(method);
        return method;
    }

{% endif %}
    public void applySpec({{ t.mainClassName }}FactorySpec<?> spec) {
        backendName(spec.backendName());
        baseUrl(spec.baseUrl());
        auth(spec.auth());
        proxy = spec.proxy();
        meterRegistry(spec.meterRegistry());
        logLevel(spec.logLevel());
    }
}
