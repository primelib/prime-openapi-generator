{# @pebvariable name="t" type="com.github.twitch4j.codegen.core.domain.template.NitroGeneratorData" #}
{# @pebvariable name="cfg" type="com.github.twitch4j.codegen.java.feign.config.JavaFeignGeneratorConfig" #}
{% include "./licenseInfo.peb" %}
package {{ t.modelPackage }};

{% include "./import.peb" with {"cfg": cfg, "imports": t.api.imports} %}
import feign.*;

/**
 * {{ t.operation.classname }}Spec
 *
 * This class is used to set request parameters when using the spec method.
 *
 * Required Parameters:
{% for param in t.operation.codegenOperation.allParams %}
{% if param.required %}
 * - {{ param.paramName }} {{ param.description }}{{ newline() }}
{% endif %}
{% endfor %}
 * Optional Parameters:
{% for param in t.operation.codegenOperation.allParams %}
{% if not param.required %}
 * - {{ param.paramName }} {{ param.description }}{{ newline() }}
{% endif %}
{% endfor %}
 */
{# Information #}
{% if description is not empty %}@Schema(description = "{{ description }}"){{ newline() }}{% endif %}
@Generated(value = "{{ t.generatorClass }}"{% if not cfg.hideGenerationTimestamp %}, date = "{{ t.generatorDate }}"{% endif %})
public class {{ t.operation.classname }}Spec {

{% for param in t.operation.codegenOperation.allParams %}
    private {{ param.dataType }} {{ param.paramName }};
{% endfor %}

    /**
     * Process Spec
     */
    public static {{ t.operation.classname }}Spec process(Consumer<{{ t.operation.classname }}Spec> spec) {
        {{ t.operation.classname }}Spec data = new {{ t.operation.classname }}Spec();
        spec.accept(data);
        data.validate();
        return data;
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     */
    public void validate() {
{% for param in t.operation.codegenOperation.allParams %}
{% if param.required %}
        Objects.requireNonNull({{ param.paramName }}, "{{ param.paramName }} is a required parameter!");
{% endif %}
{% endfor %}
    }

{% for param in t.operation.codegenOperation.allParams %}
    /**
     * Set {{ param.paramName }}{{ newline() }}
     *
     * {% include "./javadoc_param.peb" %}
     * @return {{ t.operation.classname }}Spec
     */
    public {{ t.operation.classname }}Spec {{ param.paramName }}({% include "./param_annotation.peb" %}{{ param.dataType }} {{ param.paramName }}) {
{% if param.dataType startswith "Map<" %}
        this.{{ param.paramName }} = Collections.unmodifiableMap({{ param.paramName }});
{% elseif param.dataType startswith "List<" %}
        this.{{ param.paramName }} = Collections.unmodifiableList({{ param.paramName }});
{% else %}
        this.{{ param.paramName }} = {{ param.paramName }};
{% endif %}
        return this;
    }

    public {{ param.dataType }} {{ param.paramName }}() {
        return this.{{ param.paramName }};
    }

{% endfor %}
}