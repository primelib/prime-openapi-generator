{% include "./licenseInfo.peb" %}
package {{ package }};

{% include "./import.peb" %}
import feign.*;

{# Information #}
{% if description is not empty %}@Schema(description = "{{ description }}"){{ newline() }}{% endif %}
@Generated(value = "{{ generatorClass }}"{% if not hideGenerationTimestamp %}, date = "{{ generatedDate }}"{% endif %})
public class {{ classname }}Spec {

{% for operation in operations.operation %}
{% if requestOverloadSpec and operation.hasParams %}
    /**
     * {{ operation.nickname | capitalize }}Spec
     *
     * This class is used to set request parameters when using the spec method.
     *
     * Required Parameters:
{% for param in operation.allParams %}
{% if param.required %}
     * - {{ param.paramName }} {{ param.description }}{{ newline() }}
{% endif %}
{% endfor %}
     * Optional Parameters:
{% for param in operation.allParams %}
{% if not param.required %}
     * - {{ param.paramName }} {{ param.description }}{{ newline() }}
{% endif %}
{% endfor %}
     */
    public static class {{ operation.nickname | capitalize }}Spec {

{% for param in operation.allParams %}
        private {{ param.dataType }} {{ param.paramName }};
{% endfor %}

        /**
         * Process Spec
         */
        public static {{ operation.nickname | capitalize }}Spec process(Consumer<{{ operation.nickname | capitalize }}Spec> spec) {
            {{ operation.nickname | capitalize }}Spec data = new {{ operation.nickname | capitalize }}Spec();
            spec.accept(data);
            data.validate();
            return data;
        }

        /**
         * Validates the Spec, will throw a exception if required parameters are missing
         */
        public void validate() {
{% for param in operation.allParams %}
{% if param.required %}
            Objects.requireNonNull({{ param.paramName }}, "{{ param.paramName }} is a required parameter!");
{% endif %}
{% endfor %}
        }

{% for param in operation.allParams %}
        /**
         * Set {{ param.paramName }}{{ newline() }}
         *
         * {% include "./javadoc_param.peb" %}
         * @return {{ operation.nickname | capitalize }}Spec
         */
        public {{ operation.nickname | capitalize }}Spec {{ param.paramName }}({% include "./param_annotation.peb" %}{{ param.dataType }} {{ param.paramName }}) {
{% if param.dataType startswith "Map<" %}
            this.{{ param.paramName }} = Collections.unmodifiableMap({{ param.paramName }});
{% elseif param.dataType startswith "List<" %}
            this.{{ param.paramName }} = Collections.unmodifiableList({{ param.paramName }});
{% else %}
            this.{{ param.paramName }} = {{ param.paramName }};
{% endif %}

            return this;
        }

        public {{ param.dataType }} {{ param.paramName }}() {
            return this.{{ param.paramName }};
        }

{% endfor %}
    }
{% endif %}
{% endfor %}
}
