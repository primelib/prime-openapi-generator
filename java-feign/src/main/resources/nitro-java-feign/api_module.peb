{# @pebvariable name="t" type="com.github.twitch4j.codegen.core.domain.template.NitroGeneratorData" #}
{# @pebvariable name="cfg" type="com.github.twitch4j.codegen.java.feign.config.JavaFeignGeneratorConfig" #}
{% include "./licenseInfo.peb" %}
package {{ t.apiPackage }};

{% include "./import.peb" with {"t": t, "imports": t.api.imports} %}
import feign.*;

{% for operation in t.api.operations %}
{% if cfg.requestOverloadSpec and operation.hasParams %}
import {{ t.additionalProperties.get("specPackage") }}.{{ operation.nickname | capitalize }}Spec;
{% endif %}
{% endfor %}

{# Information #}
{% if description is not empty %}@Schema(description = "{{ description }}"){{ newline() }}{% endif %}
@Generated(value = "{{ t.generatorClass }}"{% if not cfg.hideGenerationTimestamp %}, date = "{{ t.generatorDate }}"{% endif %})
public interface {{ t.api.classname }} {

{% for operation in t.api.operations %}
{# @pebvariable name="operation" type="org.openapitools.codegen.CodegenOperation" #}
{# DEFAULT METHOD #}
{% include "./javadoc_method.peb" %}{{ newline() }}
{# Deprecated #}
{% if operation.isDeprecated %}    @Deprecated{{ newline() }}{% endif %}
    @RequestLine("{{ operation.httpMethod }} {{ operation.path }}{% if operation.hasQueryParams %}?{% for param in operation.queryParams %}{{ param.baseName }}={{ "{" }}{{ param.paramName }}{{ "}" }}{% if not loop.last %}&{% endif %}{% endfor %}{% endif %}")
{% if operation.hasHeaderParams %}
    @Headers(
{% for param in operation.headerParams %}
        "{{ param.baseName }}: {% if param.baseName == "Authorization" %}Bearer {% endif %}{{ param.paramName | wrapin("{", "}") }}"{% if not loop.last %}, {% endif %}{{ newline() }}
{% endfor %}
    )
{% endif %}
    {% if operation.returnType is not empty %}{{ operation.returnType }}{% else %}void{% endif %} {{ operation.nickname }}({% for param in operation.allParams %}{% if param.isHeaderParam or param.isQueryParam %}@Param("{{ param.paramName }}"){% endif %} {% include "./param_annotation.peb" %}{{ param.dataType }} {{ param.paramName }}{% if not loop.last %}, {% endif %}{% endfor %});

{# OVERLOAD - SPEC #}
{% if cfg.requestOverloadSpec and operation.hasParams %}
    /**
     * {{ operation.summary }}{{ newline() }}
     *
{% if operation.notes is not empty %}
     * {{ operation.notes }}{{ newline() }}
     *
{% endif %}
{# Authentcation #}
{% if operation.vendorExtensions['x-required-scopes'] is not empty %}
     * Authentication - Required Scopes: {{ operation.vendorExtensions['x-required-scopes'] }}{{ newline() }}
{% endif %}
{# Params & ReturnType #}
     * @param {{ "spec" | padright(20) }} a consumer that takes a spec to prepare the request for execution
{% if operation.returnType is not empty %}
     * @return {{ operation.returnType }}{{ newline() }}
{% endif %}
{# External Documentation #}
{% if operation.externalDocs is not empty %}
     * @see <a href="{{ operation.externalDocs.url }}">{{ operation.externalDocs.description }}</a>
{% endif %}
{# Deprecated #}
{% if operation.isDeprecated %}
     * @deprecated{% if operation.vendorExtensions.x_deprecated is not empty %} {{ operation.vendorExtensions.x_deprecated }}{% endif %}{{ newline() }}
{% endif %}
     */
    default {% if operation.returnType is not empty %}{{ operation.returnType }}{% else %}void{% endif %} {{ operation.nickname }}(Consumer<{{ operation.nickname | capitalize }}Spec> spec) {
        {{ operation.nickname | capitalize }}Spec finalSpec = new {{ operation.nickname | capitalize }}Spec(spec);
        {% if operation.returnType is not empty %}return {% endif %}{{ operation.nickname }}({% for param in operation.allParams %}finalSpec.{{ param.paramName }}(){% if not loop.last %}, {% endif %}{% endfor %});
    }

{% endif %}
{% endfor %}
}
